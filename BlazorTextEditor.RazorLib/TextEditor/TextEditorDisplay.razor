@using System.Text
@using BlazorTextEditor.ClassLib.Context
@using BlazorTextEditor.ClassLib.TextEditor
@using BlazorTextEditor.RazorLib.Virtualization

<ContextBoundary ContextRecord="ContextFacts.TextEditorContext"
                 StyleCssString="height: calc(100% - 3.5rem);">
    <div @ref="_textEditorDisplayElementReference"
         @onclick="FocusTextEditorOnClickAsync"
         @onkeydown="HandleOnKeyDownAsync"
         @onkeydown:preventDefault="true"
         class="bte_text-editor">

        <div style="height: 7rem; overflow: auto;">
            <div style="display: flex;">
                <div>
                    <input type="checkbox"
                           @bind="_showWhitespace"
                           class="bte_input"/>

                    <span>Show Whitespace</span>
                </div>

                &nbsp;
                <div style="border: 2px solid var(--bte_primary-border-color);"></div>
                &nbsp;

                <div>
                    <input type="checkbox"
                           @bind="_showNewlines"
                           class="bte_input"/>

                    <span>Show Newlines</span>
                </div>
            </div>

            <button class="btn btn-primary"
                    @onclick="ApplyRoslynSyntaxHighlightingOnClick">
                ApplyRoslyn
            </button>

            <button class="btn btn-primary"
                    @onclick="() => _shouldMeasureDimensions = true">
                Re-measure
            </button>

            <span>
                Width:&nbsp;@(_textEditorWidthAndHeight?.WidthInPixels.ToString() ?? "null")px,
                &nbsp;
                Height:@(_textEditorWidthAndHeight?.HeightInPixels.ToString() ?? "null")px
            </span>
        </div>

        <div style="height: 3.5rem;">
            Time to first render:&nbsp;<em>@($"{TimeToFirstRender.TotalMilliseconds:N0}")ms</em>
        </div>

        <div class="bte_text-editor-content bte_unselectable"
             id="@TextEditorContentId"
             @onmousedown="HandleContentOnMouseDownAsync"
             @onmousemove="HandleContentOnMouseMoveAsync">
            <div class="bte_measure-character-width-and-row-height bte_row"
                 id="@MeasureCharacterWidthAndRowHeightId">

                @for (int i = 0; i < _testStringRepeatCount; i++)
                {
                    <text>
                        @_testStringForMeasurement
                    </text>
                }
            </div>


            <div class="bte_text-selection-group">
                @if (_textEditorCursor.TextEditorSelection.AnchorPositionIndex.HasValue &&
                     _textEditorCursor.TextEditorSelection.AnchorPositionIndex.Value !=
                     _textEditorCursor.TextEditorSelection.EndingPositionIndex)
                {
                    var lowerBound = _textEditorCursor.TextEditorSelection.AnchorPositionIndex.Value;
                    var upperBound = _textEditorCursor.TextEditorSelection.EndingPositionIndex;

                    if (lowerBound > upperBound)
                    {
                        (lowerBound, upperBound) = (upperBound, lowerBound);
                    }

                    var localTextEditor = TextEditorStatesSelection.Value;

                    var selectionIndex = lowerBound;

                    var firstRowToSelectData = localTextEditor.FindRowIndexRowStartRowEndingTupleFromPositionIndex(selectionIndex);
                    var lastRowToSelectData = localTextEditor.FindRowIndexRowStartRowEndingTupleFromPositionIndex(upperBound);

                    List<int> rowIndicesToSelect = new();

                    for (int i = firstRowToSelectData.rowIndex; i <= lastRowToSelectData.rowIndex; i++)
                    {
                        var rowIndex = i;

                        <div class="bte_text-selection"
                             style="@GetTextSelectionStyleCss(lowerBound, upperBound, rowIndex)">
                        </div>
                    }
                }
            </div>

            @if (_characterWidthAndRowHeight is not null &&
                 _textEditorWidthAndHeight is not null &&
                 _rows is not null &&
                 _rows.Any())
            {
                var tabKeyOutput = "&nbsp;&nbsp;&nbsp;&nbsp;";
                var spaceKeyOutput = "&nbsp;";

                if (_showWhitespace)
                {
                    tabKeyOutput = "--->";
                    spaceKeyOutput = "Â·";
                }

                <VirtualizationDisplay EntriesProviderFunc="EntriesProvider"
                                       Context="virtualizedRow">
                    @{
                        var index = virtualizedRow.Index;
                        var row = virtualizedRow.Item;
                    }

                    <div class="bte_gutter"
                         style="@GetGutterStyleCss(index)">
                        @(index + 1)
                    </div>

                    <div class="bte_row"
                         style="@GetRowStyleCss(index)">
                        @if (row.Any())
                        {
                            var spanBuilder = new StringBuilder();
                            var currentDecorationByte = row.First().DecorationByte;

                            foreach (var richCharacter in row)
                            {
                                if (currentDecorationByte == richCharacter.DecorationByte)
                                {
                                    AppendTextEscaped(
                                        spanBuilder,
                                        richCharacter,
                                        tabKeyOutput,
                                        spaceKeyOutput);
                                }
                                else
                                {
                                    <span class="@GetCssClass(currentDecorationByte)">
                                        @((MarkupString)spanBuilder.ToString())
                                    </span>

                                    spanBuilder.Clear();

                                    AppendTextEscaped(
                                        spanBuilder,
                                        richCharacter,
                                        tabKeyOutput,
                                        spaceKeyOutput);

                                    currentDecorationByte = richCharacter.DecorationByte;
                                }
                            }

                            /* Final grouping of contiguous characters */
                            <span class="@GetCssClass(currentDecorationByte)">
                                @((MarkupString)spanBuilder.ToString())
                            </span>
                        }

                        @if (_showNewlines)
                        {
                            var rowEndingTuple = TextEditorStatesSelection.Value.RowEndingPositions[index];

                            <span class="bte_newline">
                                @rowEndingTuple.rowEndingKind.AsCharactersHtmlEscaped()
                            </span>
                        }
                    </div>
                </VirtualizationDisplay>
            }

            @if (_characterWidthAndRowHeight is not null)
            {
                <TextEditorCursorDisplay @ref="_textEditorCursorDisplay"
                                         TextEditorCursor="_textEditorCursor"
                                         FontWidthAndElementHeight="_characterWidthAndRowHeight"
                                         TextEditor="TextEditorStatesSelection.Value"/>
            }
        </div>
    </div>
</ContextBoundary>