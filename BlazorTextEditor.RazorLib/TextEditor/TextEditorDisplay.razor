@using System.Text
@using BlazorTextEditor.ClassLib.TextEditor
<div @ref="_textEditorDisplayElementReference"
     @onclick="FocusTextEditorOnClickAsync"
     @onkeydown="HandleOnKeyDownAsync"
     @onkeydown:preventDefault="true"
     class="bte_text-editor">

    <div>
        <input type="checkbox" @bind="_showWhitespace" />
        
        <span>Show Whitespace</span>
    </div>
    
    <div>
        <input type="checkbox" @bind="_showNewlines" />
        
        <span>Show Newlines</span>
    </div>
    
    <button class="btn btn-primary"
            @onclick="ApplyRoslynSyntaxHighlightingOnClick">
        ApplyRoslynSyntaxHighlightingOnClick
    </button>

    <div class="bte_text-editor-content"
         id="@TextEditorContentId"
         @onclick="HandleContentOnClickAsync">
        <div class="bte_measure-character-width-and-row-height bte_row"
             id="@MeasureCharacterWidthAndRowHeightId">
            
            @for (int i = 0; i < _testStringRepeatCount; i++)
            {
                <text>
                    @_testStringForMeasurement    
                </text>
            }
        </div>

        @if (_rows is not null &&
             _rows.Any())
        {
            var tabKeyOutput = "&nbsp;&nbsp;&nbsp;&nbsp;";
            var spaceKeyOutput = "&nbsp;";
    
            if (_showWhitespace)
            {
                tabKeyOutput = "--->";
                spaceKeyOutput = "Â·";
            }
            
            for (var i = 0; i < _rows.Count; i++)
            {
                var index = i;
                var row = _rows[index];
                
                <div class="bte_gutter"
                     style="@GetGutterStyleCss(index)">
                    @(index + 1)
                </div>
                
                <div class="bte_row"
                     style="@GetRowStyleCss(index)">
                    @if (row.Any())
                    {
                        var spanBuilder = new StringBuilder();
                        var currentDecorationByte = row.First().DecorationByte;

                        foreach (var richCharacter in row)
                        {
                            if (currentDecorationByte == richCharacter.DecorationByte)
                            {
                                switch (richCharacter.Value)
                                {
                                    case '\t':
                                        spanBuilder.Append(tabKeyOutput);
                                        break;
                                    case ' ':
                                        spanBuilder.Append(spaceKeyOutput);
                                        break;
                                    case '\r':
                                        break;
                                    case '\n':
                                        break;
                                    case '<':
                                        spanBuilder.Append("&lt;");
                                        break;
                                    case '>':
                                        spanBuilder.Append("&gt;");
                                        break;
                                    case '"':
                                        spanBuilder.Append("&quot;");
                                        break;
                                    case '\'':
                                        spanBuilder.Append("&#39;");
                                        break;
                                    case '&':
                                        spanBuilder.Append("&amp;");
                                        break;
                                    default:
                                        spanBuilder.Append(richCharacter.Value);
                                        break;
                                }
                            }
                            else
                            {
                                <span class="@GetCssClass(currentDecorationByte)">
                                    @((MarkupString)spanBuilder.ToString())
                                </span>

                                spanBuilder.Clear();
                                spanBuilder.Append(richCharacter.Value);
                                currentDecorationByte = richCharacter.DecorationByte;
                            }
                        }

                        /* Final grouping of contiguous characters */
                        <span class="@GetCssClass(currentDecorationByte)">
                            @((MarkupString)spanBuilder.ToString())
                        </span>
                    }
                    
                    @if(_showNewlines) {
                        var rowEndingTuple = TextEditorStatesSelection.Value.RowEndingPositions[i];
                        
                        <span style="color: #007F00; background-color: #faeee2">
                            @rowEndingTuple.rowEndingKind.AsCharactersHtmlEscaped()    
                        </span>
                    }
                </div>
            }
        }
      
        @if (_characterWidthAndRowHeight is not null)
        {
            <TextEditorCursorDisplay @ref="_textEditorCursorDisplay" 
                                     TextEditorCursor="_textEditorCursor"
                                     FontWidthAndElementHeight="_characterWidthAndRowHeight"
                                     TextEditor="TextEditorStatesSelection.Value" />    
        }
    </div>
</div>