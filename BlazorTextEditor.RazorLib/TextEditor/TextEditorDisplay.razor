@using System.Text
<div tabindex="-1"
     @ref="_textEditorDisplayElementReference"
     @onclick="FocusTextEditorOnClickAsync"
     @onkeydown="HandleOnKeyDown"
     @onkeydown:preventDefault="true">
    
     <button class="btn btn-primary">
          Click me
     </button>
     
     <button class="btn btn-primary"
             @onclick="ApplyRoslynSyntaxHighlightingOnClick">
          ApplyRoslynSyntaxHighlightingOnClick
     </button>
    
     @if (_rows is not null &&
          _rows.Any())
     {
          foreach (var row in _rows)
          {
               if (row.Any())
               {
                    <div>
                         @{
                              var spanBuilder = new StringBuilder();
                              var currentDecorationByte = row.First().DecorationByte;

                              foreach (var richCharacter in row)
                              {
                                   if (currentDecorationByte == richCharacter.DecorationByte)
                                   {
                                        switch (richCharacter.Value)
                                        {
                                             case '\t':
                                                  spanBuilder.Append("&nbsp;&nbsp;&nbsp;&nbsp;");
                                                  break;
                                             case ' ':
                                                  spanBuilder.Append("&nbsp;");
                                                  break;
                                             case '\r':
                                                  break;
                                             case '\n':
                                                  break;
                                             case '<':
                                                  spanBuilder.Append("&lt;");
                                                  break;
                                             case '>':
                                                  spanBuilder.Append("&gt;");
                                                  break;
                                             case '"':
                                                  spanBuilder.Append("&quot;");
                                                  break;
                                             case '\'':
                                                  spanBuilder.Append("&#39;");
                                                  break;
                                             case '&':
                                                  spanBuilder.Append("&amp;");
                                                  break;
                                             default:
                                                  spanBuilder.Append(richCharacter.Value);
                                                  break;
                                        }
                                   }
                                   else
                                   {
                                        <span class="@GetCssClass(currentDecorationByte)">
                                             @((MarkupString)spanBuilder.ToString())
                                        </span>

                                        spanBuilder.Clear();
                                        spanBuilder.Append(richCharacter.Value);
                                        currentDecorationByte = richCharacter.DecorationByte;
                                   }
                              }

                         @* Final grouping of contiguous characters *@
                              <span class="@GetCssClass(currentDecorationByte)">
                                   @((MarkupString)spanBuilder.ToString())
                              </span>
                         }
                    </div>
               }
          }
     }
</div>