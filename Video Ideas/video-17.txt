Notes for video 17:

# Intent
{
-Finalize Resizable Dialogs
}

# Plan
{

@ResizableDisplay.razor.cs
-private void SubscribeToDragEvent(Func<MouseEventArgs, Task> dragEventHandler)
{
    _dragEventHandler = dragEventHandler;
    Dispatcher.Dispatch(new SetDragStateAction(true, null));
}
-

#####

@MainLayout.razor.cs
- NOT A FLUXOR COMPONENT
-IDisposable
-IState<DragState>
-_renderCount = 1
-private string UnselectableClassCss => DragStateWrap.Value.ShouldDisplay
        ? "bte_unselectable"
        : string.Empty;
-private bool _previousDragStateWrapShouldDisplay;
-protected override void OnInitialized()
{
    DragStateWrap.StateChanged += DragStateWrapOnStateChanged;
    
    base.OnInitialized();
}
-protected override void OnAfterRender(bool firstRender)
{
    _renderCount++;
    
    base.OnAfterRender(firstRender);
}
-private async void DragStateWrapOnStateChanged(object? sender, EventArgs e)
{
    if (_previousDragStateWrapShouldDisplay != DragStateWrap.Value.ShouldDisplay)
    {
        _previousDragStateWrapShouldDisplay = DragStateWrap.Value.ShouldDisplay;
        await InvokeAsync(StateHasChanged);
    }
}
-public void Dispose()
{
    DragStateWrap.StateChanged -= DragStateWrapOnStateChanged;
}

@MainLayout.razor
-<BlazorTextEditor.RazorLib.BlazorTextEditorRazorLibInitializer/>
-<BlazorTextEditor.RazorLib.DragCase.DragDisplay/>
-@UnselectableClassCss"
-@nameof(MainLayout)&nbsp;rendered:&nbsp;@_renderCount&nbsp;times
-<br/>

#####

@ResizableDisplay.razor.cs
-private Func<(MouseEventArgs firstMouseEventArgs, MouseEventArgs secondMouseEventArgs), Task>? _dragEventHandler;
-private async Task DragEventHandlerEastResizeHandleAsync((MouseEventArgs firstMouseEventArgs, MouseEventArgs secondMouseEventArgs) mouseEventArgsTuple)
    {
        ResizeService.ResizeEast(
            ElementDimensions, 
            mouseEventArgsTuple.firstMouseEventArgs, 
            mouseEventArgsTuple.secondMouseEventArgs);
        
        await InvokeAsync(StateHasChanged);
    }
-(MouseEventArgs firstMouseEventArgs, MouseEventArgs secondMouseEventArgs) mouseEventArgsTuple

#########

@blazorTextEditor.css
-remove background color for resize handles
-.bte_drag-display {
    z-index: 30;
    width: 100vw;
    height: 100vh;
    position: fixed;
    left: 0;
    top: 0;
    background-color: mediumaquamarine;
    opacity: 0.3;
}

###########

@DialogDisplay.razor
-@onmousedown="SubscribeMoveHandle"
-@ref=""

######

@DialogDisplay.razor.cs
-private ResizableDisplay? _resizableDisplay;
-private void SubscribeMoveHandle()
{
    _resizableDisplay?.SubscribeToDragEventWithMoveHandle();
}

}

@ResizableDisplay.razor.cs
-public void SubscribeToDragEventWithMoveHandle()
{
    SubscribeToDragEvent(DragEventHandlerMoveHandleAsync);
}

private async Task DragEventHandlerMoveHandleAsync(
    (MouseEventArgs firstMouseEventArgs, MouseEventArgs secondMouseEventArgs) mouseEventArgsTuple)
{
    ResizeService.Move(
        ElementDimensions,
        mouseEventArgsTuple.firstMouseEventArgs,
        mouseEventArgsTuple.secondMouseEventArgs);

    await InvokeAsync(StateHasChanged);
}

-Resize folder
-ResizeService.cs
{

-public static void ResizeNorth(ElementDimensions elementDimensions, MouseEventArgs firstMouseEventArgs, MouseEventArgs secondMouseEventArgs)

ClientX and ClientY

ResizeNorth()
{
	-var deltaY
	-Height -= deltaY
	-Top += deltaY
}

ResizeEast()
{
	-var deltaX
	-Width += deltaX
}

ResizeSouth()
{
	-var deltaY
	-Height += deltaY
}

ResizeWest()
{
	-var deltaX
	-Width -= deltaX
	-Left += deltaX
}

-- compose the diagonals of cardinals

Move()
{
	-var deltaY
	-var deltaX
	
	-Top += deltaY
	-Left += deltaX
}

}

# Youtube Video Description
{
	Part 16:
	https://youtu.be/7v2HIZ20vVA

	Starting Point Repo:
	https://github.com/huntercfreeman/BlazorTextEditor
	
	BlazorStudio Repo:
	https://github.com/huntercfreeman/BlazorStudio
	
	Fluxor Repo:
	https://github.com/mrpmorris/Fluxor
	
	Photino.Blazor:
	https://github.com/tryphotino/photino.Blazor
}

# Youtube Video Title
{
	Resizable Dialogs | Blazor Text Editor Part 17
}
