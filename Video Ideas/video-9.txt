Notes for video 9:

# Intent
{
	-Insertion
	-Deletion
	-View edits
	-Undo with ctrl + z
	-Redo with ctrl + y
}

# Plan
{
	-private List<IEditBlock> _editBlocks = new();
	-public ImmutableArray<IEditBlock> EditBlocks => 
		_editBlocks.ToImmutableArray();
	-PerformTextEditorEditAction()
	{
		if (meta && !whitespace)
		{
			if (backspace)
				PerformBackspaces(textEditorEditAction);
			else if (delete)
				PerformDeletions(textEditorEditAction);
		}
		else
        {
            PerformInsertions(textEditorEditAction);
        }
        
        return this;
	}
	-private void EnsureUndoPoint(TextEditKind textEditKind)
	-private void PerformInsertions(TextEditorEditAction textEditorEditAction)
	{
		EnsureUndoPoint(TextEditKind.Insertion);
		
		-foreach over the cursors
		-if wasTabKey update the tab positions in the correct order
		-after insertion increment any that come after insertion point
			-lineEnding positions 
			-tab positions
	}
	-private void PerformDeletions(TextEditorEditAction textEditorEditAction)
	-private void PerformBackspaces(TextEditorEditAction textEditorEditAction)
	-Render the edit blocks to showcase them just for debugging
	 	then remove them from UI.
	 	{
	 		<div style="overflow: auto; height: 5em;">
                @{
                    foreach (var editBlock in TextEditor.EditBlocks)
                    {
                        var message = editBlock.Something
                        <div style="white-space: nowrap;">
                            @foreach (var character in message)
                            {
                                if (character == '\t')
                                {
                                    <text>&nbsp;&nbsp;&nbsp;&nbsp;</text>
                                }
                                else if (character == ' ')
                                {
                                    <text>&nbsp;</text>
                                }
                                else
                                {
                                    <text>@character</text>
                                }
                            }
                        </div>
                    }
                }
            </div>
	 	}
 	-
 	{
		if (keydown == (ctrl + z))
			// undo most recent editblock
		else if(keydown == (ctrl + y))
			// REDO most recently undone editblock
		else
			// history changed so clear REDO block
 	}
}

# Youtube Video Description
{
	Part 8:
	https://youtu.be/jcml53gERYE

	Starting Point Repo:
	https://github.com/huntercfreeman/BlazorTextEditor
	
	BlazorStudio Repo:
	https://github.com/huntercfreeman/BlazorStudio
	
	Fluxor Repo:
	https://github.com/mrpmorris/Fluxor
}

# Youtube Video Title
{
	Insertion, Deletion, Undo / Redo | Blazor Text Editor Part 8
}
