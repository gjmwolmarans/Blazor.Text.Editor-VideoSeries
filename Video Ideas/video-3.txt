Notes for video 3:

# Intent
{
    The goals of video 3 are:
		-Add newline logic.
		-Add Tab key logic
		-Add JavaScript to measure the 
			-Row height 
			-Character width
		-Add Cursor
			-Class
			-Component
		-OnClick move cursor relative to the TextEditor scrollable viewport
		-OnKeyDown 
			-Move cursor with movement keyboard keys
			-Insert Text at cursor position with character keyboard keys
			-Remove Text at cursor position
				-Backspace
				-Delete
		-Maintain a list of Edits that the user has made
			-Consolidate common EditKinds into a singular edit
			-Ctrl + Z should undo the most recent edit block
			
	Maybe do MultiCursor editing in this video? If too long of a video wait until later.
}

# Plan
{
	# Step 0
		-FONT SIZE NEEDS TO BE INCREASED FOR EVER APPLICATION I USE

    # Step 1
        -Iterate through content to find position of newline characters
        	and maintain them in a List<int> where int is the position 
        	relative to all characters in the document.
	# Step 2
		-When rendering out the markup to the UI switch statement swap out
			all html characters that need escaped
			{
				switch (textCharacter.Value)
                {
                    case '\t':
                        spanTextBuilder.Append("&nbsp;&nbsp;&nbsp;&nbsp;");
                        break;
                    case ' ':
                        spanTextBuilder.Append("&nbsp;");
                        break;
                    case '\r':
                        break;
                    case '\n':
                        break;
                    case '<':
                        spanTextBuilder.Append("&lt;");
                        break;
                    case '>':
                        spanTextBuilder.Append("&gt;");
                        break;
                    case '"':
                        spanTextBuilder.Append("&quot;");
                        break;
                    case '\'':
                        spanTextBuilder.Append("&#39;");
                        break;
                    case '&':
                        spanTextBuilder.Append("&amp;");
                        break;
                    default:
                        spanTextBuilder.Append(textCharacter.Value);
                        break;
                }
			}
		-In order to render the escaped HTML characters use (MarkupString) cast on the string.
	# Step 3
		-Create the JavaScript methods
			-measureFontSizeByElementId(elementId, amountOfCharactersRendered)
			-measureDimensionsByElementId(getTextEditorElementId)
			-getRelativePosition(elementId, clientX, clientY))
	
	# Step 4
		-Create TextEditorCursor ClassLib
		-Create ImmutableTextEditorCursor ClassLib
		-Create TextEditorCursorDisplay Blazor Component
	
	# Step 5
		-OnClick move cursor
		-OnKeyDown move cursor if movement key
		-PreferredColumnIndex
	
	# Step 6
		-Account for the Tab keys when rendering the Cursor on the UI
			-GetTabsCountOnSameRowBeforeCursor(rowIndex, columnIndex);
			
	# Step 7
		-Insert text onkeydown
		-Remove text
			-Backspace
			-Delete
	
	# Step 8
		-Maintain a list of edits the user made
		-Consolidate consecutive edits of the same kind (Instertion / Deletion / Other )
	
	# Step 9
		-Ctrl + Z should undo the most recent edit block
}

# Youtube Video Description
{
	Part 2:
	https://youtu.be/D5PdeRsV-Hk

	Starting Point Repo:
	https://github.com/huntercfreeman/BlazorTextEditor
	
	BlazorStudio Repo:
	https://github.com/huntercfreeman/BlazorStudio
	
	Fluxor Repo:
	https://github.com/mrpmorris/Fluxor
}

# Youtube Video Title
{
	Cursor movement, ( Insertion / Deletion ) and Undo | Blazor Text Editor Part 3
}
